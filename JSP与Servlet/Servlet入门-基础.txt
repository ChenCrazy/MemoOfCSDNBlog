Servlet基础

TomCat等级
手工编写Servlet
使用MyEclipse编写
Servlet生命周期
使用Servlet获取九大内置对象

Servlet简介
1)Servlet是按照Servlet规范编写的Java类。
2)Servlet应用请求/响应模型，扩展了服务器的功能。
3)Servlet是WEB应用程序中的一个组件。
一个Servlet就是一个Java类，是在服务器上运行的程序，并且可以通过 “请求-响应”编程模型来访问这个驻留在服务器内存里的Servlet程序。
Servlet是一种独立于平台和协议的服务器端的Java技术，可以用来生成动态的Web页面与传统的CGI（公共网关接口）和许多其他类似CGI技术相比，Servlet具有更好的可移植性、更强大的功能，更少的投资，更高的效率，更好的安全性等特点。
注意：Servlet不是从命令行启动的，而是由包含Java虚拟机的Web服务器进行加载


TomCat容器分为四个等级，Servet的容器管理Context容器，一个Context对应一个Web工程

Container容器 ——包含——> Engine引擎容器 ——包含——> HOST主机容器 ——包含——> Servlet容器 
————> 多个Context容器 ——包含——> 多个Wrapper包装类

Servet可以管理很多上下文Context容器，一个Context就是一个Web工程，其中页面被包装

手工编写Servlet三个步骤
    
1️⃣首先编写一个Java类，继承HttpServlet。
    Servlet(interface) ---> GencricServlet(Abstract Class) ---> HttpServlet(Abstract Class) --->自定义Servlet
    Servlet：三个方法 Init() service() desrtoy()
    GencricServlet: 与协议无关的Servlet
    HttpServlet: 实现了Http的Servlet
    自定义Servlet: override覆盖doGet()/doPost()方法 
2️⃣重写doGet()/doPost方法，取决于用户提交信息的方式
3️⃣在web.xml中注册这个Servlet

Servlet执行流程
以Get方式请求执行顺序
    请求HelloServlet ————> 用户点击超链接<a herf="servlet/Servlet"></a>
    请求提交后，服务器就会在web.xml文件中寻找与之相对应的URL地址
    以此地址<url-pattern>寻找它的Servlet名字<servlet-name>
    以此名字寻找<servlet-class>Servlet这个处理类，
    然后根据用户的具体提交请求方式，由于使用的是超链接，服务器分析请求完毕，选择使用doGet/doPost来执行这个类中重写的方法

Servlet生命周期
    初始化阶段：调用类的构造方法创建Servlet实例，
        然后调用Init(ServletConfig)方法，若有实例就不会在创建、调用，直接执行下一步。
    响应客户端请求: 调用Service()方法
        由Service方法根据提交方式选择执行doGet/doPost方法
    终止阶段: 调用destroy()方法

TomCat容器装载Servlet()的三种情况
    Servlet容器启动时会自动装载某些Servlet，实现它只需要在web.xml文件中配置
   在 <Servlet></Servlet>之间添加<loadon-startup>1</loadon-startup>代码
   数字越小表示优先级越高

    当Servlet容器启动后，客户端首次向Servlet发送请求后，TomCat服务器也会自动加载

    Servlet类文件被更新后，服务器会重新装载Servlet。Servlet是长期驻留在内存的，当Servlet在服务器中被加载之后，这个Servlet就会长期被保存在服务器的内存中
    Servlet创建Servlet实例时(构造方法后)，首先创建Servlet类的初始化方法Init()，在整个生命周期内，此初始化方法只被调用一次

使用Servlet获取九大内置对象

    Jsp对象                                    使用Servlet的获取方式
    Out                                        response.getWriter()
    request                                    service方法中的request参数
    response                                   service方法中的response参数
    session                                    request.getSession()函数
    application                                getServletContext()函数
    exception                                       Throwable
    page                                             this
    pageContext                                     pageContext
    Config                                          getServletConfig函数

